{"version":3,"sources":["styled/styled.jsx","components/helpers/instance.js","styled/FormsStyled.jsx","styled/ErrorStyled.jsx","components/Error/Error.jsx","components/Error/ResponseError.jsx","components/helpers/Yup.js","components/Forms/Forms.jsx","styled/AppStyled.jsx","components/App/App.jsx","index.jsx"],"names":["GlobalStyle","createGlobalStyle","instance","axios","create","baseURL","SkillsWrap","styled","div","SpanBtn","span","StyledButton","Button","loading","SkillsButton","StyledForm","form","Label","label","SymSpan","Wrap","ErrorMessage","validate","position","Error","touched","message","defaultProps","undefined","ResponseError","response","validationSchema","Yup","shape","name","typeError","max","required","password","min","matches","repeatPassword","oneOf","email","website","url","age","acceptTerms","Forms","state","skills","addSkills","skill","setFieldValue","setState","id","_uniqueId","addSkillsEnter","event","key","clearArrSkills","renderSkills","values","map","defaultValue","value","type","component","Input","this","initialValues","onSubmit","a","resetForm","post","el","request","statusText","data","errors","handleChange","setFieldTouched","handleSubmit","isSubmitting","onChange","onKeyDown","onClick","defaultChecked","disabled","htmlType","Component","Section","section","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea6f23fb.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n*{\n  box-sizing: border-box;\n}\n  body {\n    background-color: lightblue;\n    font-family: 'Impact', sans-serif;\n    font-size: 16px;\n    display:flex;\n    justify-content:center;\n  }\n`;\n\nexport default GlobalStyle;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'http://localhost:3001',\n});\nexport default instance;\n","import { Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport styled from 'styled-components';\n\nexport const SkillsWrap = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n\n  & > input {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const SpanBtn = styled.span`\n  margin-left: 5px;\n  text-align: center;\n`;\n\nexport const StyledButton = styled(Button)`\n  color: rgba(0, 36, 217, 0.88);\n  width: 120px;\n  align-self: center;\n  margin-top: 10px;\n  & svg {\n    display: ${({ loading }) => {\n      return loading ? 'inline-block' : 'none';\n    }};\n  }\n`;\nexport const SkillsButton = styled(Button)`\n  background-color: transparent;\n  color: rgba(0, 36, 217, 0.88);\n  width: 100px;\n  position: absolute;\n  right: -110px;\n`;\n\nexport const StyledForm = styled.form`\n  width: 350px;\n  display: flex;\n  justify-content: space-between;\n  flex-flow: column nowrap;\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  margin-bottom: 2px;\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-between;\n  color: rgba(4, 4, 4, 0.47);\n  font-size: 14px;\n\n  & input {\n    width: 180px;\n    font-family: 'Times New Roman', sans-serif;\n    font-size: 14px;\n  }\n\n  &:last-of-type {\n    margin-top: 40px;\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n  }\n\n  &:last-of-type > input {\n    width: 15px;\n    margin-left: 200px;\n  }\n`;\n\nexport const SymSpan = styled.span`\n  font-size: 20px;\n  color: red;\n  margin-right: auto;\n  text-align: left;\n  justify-self: flex-start;\n`;\n\nexport const Wrap = styled.div`\n  margin: 0 auto;\n`;\n","import styled from 'styled-components';\n\nconst ErrorMessage = styled.div`\n  font-family: 'Helvetica Neue', sans-serif;\n  font-weight: 600;\n  margin-bottom: 15px;\n  font-size: 12px;\n  color: ${({ validate }) => (validate ? 'green' : 'red')};\n  align-self: ${({ position }) => (position ? 'center' : 'flex-end')};\n`;\nexport default ErrorMessage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ErrorMessage from '../../styled/ErrorStyled';\n\nconst Error = ({ touched, message }) => {\n  if (!touched) {\n    return <ErrorMessage>&nbsp;</ErrorMessage>;\n  }\n  if (message && touched) {\n    return <ErrorMessage>{message}</ErrorMessage>;\n  }\n  return <ErrorMessage validate>{touched ? <span>&nbsp;</span> : 'Заполнено верно'}</ErrorMessage>;\n};\n\nError.defaultProps = {\n  touched: false,\n  message: undefined,\n};\n\nError.propTypes = {\n  touched: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  message: PropTypes.string,\n};\n\nexport default Error;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport ErrorMessage from '../../styled/ErrorStyled';\n\nconst ResponseError = ({ response }) => {\n  if (response === 'successfully') {\n    return (\n      <ErrorMessage position validate>\n        Email успешно зарегестрирован\n      </ErrorMessage>\n    );\n  }\n  if (response === 'not successful') {\n    return <ErrorMessage position>Email уже существует</ErrorMessage>;\n  }\n  return <ErrorMessage position>&nbsp;</ErrorMessage>;\n};\n\nResponseError.propTypes = {\n  response: PropTypes.string.isRequired,\n};\nexport default ResponseError;\n","import * as Yup from 'yup';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .typeError('Неверный формат введенных данных')\n    .max(50, 'Не более 50 символов')\n    .required('Поле не заполнено'),\n  password: Yup.string()\n    .typeError('Неверный формат введенных данных')\n    .max(40, 'Не более 40 символов')\n    .min(8, 'Не менее 8 символов')\n    .matches(\n      /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])/,\n      'Пароль должен состоять из латинских букв и цифр, а также содержать хотя бы одну строчную, заглавную буквы и цифры'\n    )\n    .required('Поле не заполнено'),\n  repeatPassword: Yup.string()\n    .typeError('Неверный формат введенных данных')\n    .oneOf([Yup.ref('password')], 'Пароли не совпадают')\n    .required('Поле не заполнено'),\n  email: Yup.string()\n    .typeError('Неверный формат введенных данных')\n    .email('Некорректный email адрес')\n    .required('Поле не заполнено'),\n  website: Yup.string()\n    .url('Некорректный url адрес')\n    .typeError('Неверный формат введенных данных')\n    .max(50, 'Не более 50 символов'),\n  age: Yup.number()\n    .typeError('Неверный формат введенных данных')\n    .min(18, 'Повзрослейте пожалуйста')\n    .max(65, 'Помолодейте пожалуйста')\n    .required('Поле не заполнено'),\n  acceptTerms: Yup.boolean().oneOf([true], 'Необходимо принять соглашение'),\n});\n\nexport default validationSchema;\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport _uniqueId from 'lodash/uniqueId';\nimport { Input } from 'antd';\nimport instance from '../helpers/instance';\nimport {\n  StyledForm,\n  Label,\n  Wrap,\n  StyledButton,\n  SkillsButton,\n  SkillsWrap,\n  SpanBtn,\n  SymSpan,\n} from '../../styled/FormsStyled';\nimport Error from '../Error/Error';\nimport ResponseError from '../Error/ResponseError';\nimport validationSchema from '../helpers/Yup';\n\nexport default class Forms extends Component {\n  state = {\n    skills: [],\n    response: '',\n    loading: false,\n  };\n\n  addSkills = (skill, setFieldValue) => () => {\n    const { skills } = this.state;\n    if (skill === '') {\n      return;\n    }\n    this.setState({\n      skills: [{ skill, id: _uniqueId() }, ...skills],\n    });\n    setFieldValue('skills', '');\n  };\n\n  addSkillsEnter = (skill, setFieldValue) => (event) => {\n    if (event.key === 'Enter') {\n      this.addSkills(skill, setFieldValue)();\n    }\n  };\n\n  clearArrSkills = () => {\n    this.setState({\n      skills: [],\n    });\n  };\n\n  renderSkills = (values) => {\n    const { skills } = this.state;\n    return skills.map(({ skill, id }) => {\n      return (\n        <Field\n          key={id}\n          defaultValue={skill}\n          value={values.skills}\n          name=\"skills\"\n          id=\"skills\"\n          type=\"text\"\n          component={Input}\n        />\n      );\n    });\n  };\n\n  render() {\n    const { response, skills, loading } = this.state;\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          password: '',\n          repeatPassword: '',\n          email: '',\n          website: '',\n          age: '',\n          skills: '',\n          acceptTerms: '',\n        }}\n        validationSchema={validationSchema}\n        onSubmit={async (values, { resetForm }) => {\n          this.setState({\n            loading: true,\n          });\n          const request = await instance.post('/sign-up', {\n            name: values.name,\n            password: values.password,\n            repeatPassword: values.repeatPassword,\n            email: values.email,\n            website: values.website,\n            age: values.age,\n            skills: skills.map((el) => el.skill),\n          });\n          if (request.statusText === 'OK') {\n            this.setState({\n              loading: false,\n              response: request.data,\n            });\n          }\n          if (request.data === 'successfully') {\n            this.clearArrSkills();\n            resetForm();\n          }\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          setFieldTouched,\n          setFieldValue,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <Wrap>\n            <StyledForm onSubmit={handleSubmit}>\n              <Label>\n                Имя<SymSpan>*</SymSpan>\n                <Field\n                  onChange={(event) => {\n                    setFieldTouched('name');\n                    handleChange(event);\n                  }}\n                  value={values.name}\n                  name=\"name\"\n                  id=\"name\"\n                  type=\"text\"\n                  component={Input}\n                />\n              </Label>\n              <Error touched={touched.name} message={errors.name} />\n              <Label>\n                Пароль<SymSpan>*</SymSpan>\n                <Field\n                  onChange={(event) => {\n                    setFieldTouched('password');\n                    handleChange(event);\n                  }}\n                  value={values.password}\n                  name=\"password\"\n                  id=\"password\"\n                  type=\"password\"\n                  component={Input}\n                />\n              </Label>\n              <Error touched={touched.password} message={errors.password} />\n              <Label>\n                Подтверждение пароля<SymSpan>*</SymSpan>\n                <Field\n                  onChange={(event) => {\n                    setFieldTouched('repeatPassword');\n                    handleChange(event);\n                  }}\n                  value={values.repeatPassword}\n                  name=\"repeatPassword\"\n                  id=\"repeatPassword\"\n                  type=\"password\"\n                  component={Input}\n                />\n              </Label>\n              <Error touched={touched.repeatPassword} message={errors.repeatPassword} />\n              <Label>\n                Email<SymSpan>*</SymSpan>\n                <Field\n                  onChange={(event) => {\n                    setFieldTouched('email');\n                    handleChange(event);\n                  }}\n                  value={values.email}\n                  name=\"email\"\n                  id=\"email\"\n                  type=\"email\"\n                  component={Input}\n                />\n              </Label>\n              <Error response touched={touched.email} message={errors.email} />\n              <Label>\n                Сайт\n                <Field\n                  onChange={(event) => {\n                    setFieldTouched('website');\n                    handleChange(event);\n                  }}\n                  value={values.website}\n                  name=\"website\"\n                  id=\"website\"\n                  type=\"text\"\n                  component={Input}\n                />\n              </Label>\n              <Error touched={touched.website} message={errors.website} />\n              <Label>\n                Возраст<SymSpan>*</SymSpan>\n                <Field\n                  onChange={(event) => {\n                    setFieldTouched('age');\n                    handleChange(event);\n                  }}\n                  value={values.age}\n                  name=\"age\"\n                  id=\"age\"\n                  type=\"text\"\n                  component={Input}\n                />\n              </Label>\n              <Error touched={touched.age} message={errors.age} />\n              <Label>\n                Навыки\n                <SkillsWrap>\n                  <Field\n                    onChange={handleChange}\n                    onKeyDown={this.addSkillsEnter(values.skills, setFieldValue)}\n                    value={values.skills}\n                    name=\"skills\"\n                    id=\"skills\"\n                    type=\"text\"\n                    component={Input}\n                  />\n                  {this.renderSkills(values.skills)}\n                </SkillsWrap>\n                <SkillsButton onClick={this.addSkills(values.skills, setFieldValue)}>\n                  Добавить\n                </SkillsButton>\n              </Label>\n              <Label>\n                Принимаю условия\n                <Field\n                  name=\"acceptTerms\"\n                  onChange={handleChange}\n                  id=\"acceptTerms\"\n                  defaultChecked\n                  type=\"checkbox\"\n                  component={Input}\n                />\n              </Label>\n              <Error touched message={errors.acceptTerms} />\n              <ResponseError response={response} />\n              <StyledButton\n                type=\"ghost\"\n                loading={loading}\n                disabled={isSubmitting}\n                htmlType=\"submit\"\n              >\n                <SpanBtn>Отправить</SpanBtn>\n              </StyledButton>\n            </StyledForm>\n          </Wrap>\n        )}\n      </Formik>\n    );\n  }\n}\n","import styled from 'styled-components';\n\nconst Section = styled.section`\n  margin-top: 50px;\n  padding: 50px;\n  width: 600px;\n  display: flex;\n  justify-content: center;\n  background-color: aliceblue;\n`;\nexport default Section;\n","import React from 'react';\nimport Forms from '../Forms/Forms';\nimport Section from '../../styled/AppStyled';\n\nconst App = () => {\n  return (\n    <Section>\n      <Forms />\n    </Section>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Normalize } from 'styled-normalize';\nimport GlobalStyle from './styled/styled';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <Normalize />\n    <App />\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}