{"version":3,"sources":["styled/styled.jsx","styled/FormsStyled.jsx","styled/ErrorStyled.jsx","components/Error/Error.jsx","components/Error/ResponseError.jsx","components/helpers/Yup.jsx","components/Forms/Forms.jsx","styled/AppStyled.jsx","components/App/App.jsx","index.jsx"],"names":["GlobalStyle","createGlobalStyle","StyledInput","styled","Input","SkillsWrap","div","StyledButton","Button","SkillsButton","StyledForm","form","Label","label","Wrap","ErrorMessage","validate","Error","touched","message","ResponseError","response","validationSchema","Yup","shape","name","typeError","max","required","password","min","matches","repeatPassword","oneOf","email","website","url","age","skills","acceptTerms","Forms","state","addSkills","skill","setFieldValue","setState","id","_uniqueId","clearArrSkills","renderSkills","setFieldTouched","handleChange","map","key","onChange","value","type","component","this","initialValues","onSubmit","values","a","setSubmitting","axios","baseURL","method","transformRequest","data","JSON","stringify","headers","request","setTimeout","errors","handleSubmit","isSubmitting","event","onClick","defaultChecked","disabled","htmlType","Component","Section","section","App","ReactDOM","render","document","getElementById"],"mappings":"8WAEA,IAUeA,EAVKC,4BAAH,K,4xCCCV,IAAMC,EAAcC,kBAAOC,IAAPD,CAAH,KAIXE,EAAaF,UAAOG,IAAV,KASVC,EAAeJ,kBAAOK,IAAPL,CAAH,KAMZM,EAAeN,kBAAOK,IAAPL,CAAH,KAOZO,EAAaP,UAAOQ,KAAV,KAOVC,EAAQT,UAAOU,MAAV,KAkBLC,EAAOX,UAAOG,IAAV,K,2JCpDjB,IAMeS,EANMZ,UAAOG,IAAV,KAGP,qBAAGU,SAA2B,QAAU,SCcpCC,EAfD,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QACxB,OAAKD,EAGDC,GAAWD,EACN,kBAAC,EAAD,KAAeC,GAEjB,kBAAC,EAAD,CAAcH,UAAQ,GAAc,gBAAZE,EAA4B,GAAK,yFALvD,kBAAC,EAAD,cCWIE,EAbO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvB,MAAiB,iBAAbA,EACK,kBAAC,EAAD,CAAcL,UAAQ,GAAtB,+IAEQ,mBAAbK,EACK,kBAAC,EAAD,8FAEF,M,QC2BMC,EApCUC,MAAaC,MAAM,CAC1CC,KAAMF,MACHG,UAAU,qLACVC,IAAI,GAAI,mGACRC,SAAS,gGACZC,SAAUN,MACPG,UAAU,qLACVC,IAAI,GAAI,mGACRG,IAAI,EAAG,kGACPC,QACC,qCACA,skBAEDH,SAAS,gGACZI,eAAgBT,MACbG,UAAU,qLACVO,MAAM,CAACV,IAAQ,aAAc,4GAC7BK,SAAS,gGACZM,MAAOX,MACJG,UAAU,qLACVQ,MAAM,iHACNN,SAAS,gGACZO,QAASZ,MACNa,IAAI,+GACJV,UAAU,qLACVC,IAAI,GAAI,mGACXU,IAAKd,MACFG,UAAU,qLACVC,IAAI,GAAI,mGACRC,SAAS,gGACZU,OAAQf,MACLG,UAAU,qLACVC,IAAI,GAAI,mGACXY,YAAahB,MAAcU,MAAM,EAAC,GAAO,0KClBtBO,E,4MACnBC,MAAQ,CACNH,OAAQ,GACRjB,SAAU,I,EAGZqB,UAAY,SAACC,EAAOC,GAAR,OAA0B,WAAO,IACnCN,EAAW,EAAKG,MAAhBH,OACM,KAAVK,IAGJ,EAAKE,SAAS,CACZP,OAAO,CAAE,CAAEK,QAAOG,GAAIC,QAAhB,mBAAkCT,MAE1CM,EAAc,SAAU,O,EAG1BI,eAAiB,WACf,EAAKH,SAAS,CACZP,OAAQ,M,EAIZW,aAAe,SAACC,EAAiBC,GAE/B,OADmB,EAAKV,MAAhBH,OACMc,KAAI,YAAoB,IAAjBT,EAAgB,EAAhBA,MAAOG,EAAS,EAATA,GAC1B,OACE,kBAAC,IAAD,CACEO,IAAKP,EACLQ,SAAUH,EACVI,MAAOZ,EACPlB,KAAK,SACLqB,GAAG,SACHU,KAAK,OACLC,UAAWvD,Q,uDAMT,IAAD,SACsBwD,KAAKjB,MAA1BpB,EADD,EACCA,SAAUiB,EADX,EACWA,OAClB,OACE,kBAAC,IAAD,CACEqB,cAAe,CACblC,KAAM,GACNI,SAAU,GACVG,eAAgB,GAChBE,MAAO,GACPC,QAAS,GACTE,IAAK,GACLC,OAAQ,GACRC,YAAa,IAEfjB,iBAAkBA,EAClBsC,SAAQ,uCAAE,WAAOC,EAAP,oBAAAC,EAAA,6DAAiBC,EAAjB,EAAiBA,cAAjB,SACcC,IAAM,CAC1B5B,IAAK,WACL6B,QAAS,wBACTC,OAAQ,OACRC,iBAAkB,CAChB,SAACC,GACC,OAAOC,KAAKC,UAAUF,KAG1BG,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElBH,KAAM,CACJ3C,KAAMoC,EAAOpC,KACbI,SAAUgC,EAAOhC,SACjBG,eAAgB6B,EAAO7B,eACvBE,MAAO2B,EAAO3B,MACdC,QAAS0B,EAAO1B,QAChBE,IAAKwB,EAAOxB,IACZC,YArBI,OACFkC,EADE,OAwBR,EAAK3B,SAAS,CACZxB,SAAUmD,EAAQJ,OAEpBL,GAAc,GACdU,YAAW,WACT,EAAKzB,iBACLe,GAAc,KACb,KA/BK,2CAAF,0DAkCP,gBACCF,EADD,EACCA,OACAa,EAFD,EAECA,OACAxD,EAHD,EAGCA,QACAiC,EAJD,EAICA,aACAD,EALD,EAKCA,gBACAN,EAND,EAMCA,cACA+B,EAPD,EAOCA,aACAC,EARD,EAQCA,aARD,OAUC,kBAAC9D,EAAD,KACE,kBAACJ,EAAD,CAAYkD,SAAUe,GACpB,kBAAC/D,EAAD,4BAEE,kBAAC,IAAD,CACE0C,SAAU,SAACuB,GACT3B,EAAgB,QAChBC,EAAa0B,IAEftB,MAAOM,EAAOpC,KACdA,KAAK,OACLqB,GAAG,OACHU,KAAK,OACLC,UAAWvD,KAGf,kBAAC,EAAD,CAAOgB,QAASA,EAAQO,KAAMN,QAASuD,EAAOjD,OAC9C,kBAACb,EAAD,8CAEE,kBAAC,IAAD,CACE0C,SAAU,SAACuB,GACT3B,EAAgB,YAChBC,EAAa0B,IAEftB,MAAOM,EAAOhC,SACdJ,KAAK,WACLqB,GAAG,WACHU,KAAK,WACLC,UAAWvD,KAGf,kBAAC,EAAD,CAAOgB,QAASA,EAAQW,SAAUV,QAASuD,EAAO7C,WAClD,kBAACjB,EAAD,uHAEE,kBAAC,IAAD,CACE0C,SAAU,SAACuB,GACT3B,EAAgB,kBAChBC,EAAa0B,IAEftB,MAAOM,EAAO7B,eACdP,KAAK,iBACLqB,GAAG,iBACHU,KAAK,WACLC,UAAWvD,KAGf,kBAAC,EAAD,CAAOgB,QAASA,EAAQc,eAAgBb,QAASuD,EAAO1C,iBACxD,kBAACpB,EAAD,eAEE,kBAAC,IAAD,CACE0C,SAAU,SAACuB,GACT3B,EAAgB,SAChBC,EAAa0B,IAEftB,MAAOM,EAAO3B,MACdT,KAAK,QACLqB,GAAG,QACHU,KAAK,QACLC,UAAWvD,KAGf,kBAAC,EAAD,CAAOmB,UAAQ,EAACH,QAASA,EAAQgB,MAAOf,QAASuD,EAAOxC,QACxD,kBAAC,EAAD,CAAeb,SAAUA,IACzB,kBAACT,EAAD,iCAEE,kBAAC,IAAD,CACE0C,SAAU,SAACuB,GACT3B,EAAgB,WAChBC,EAAa0B,IAEftB,MAAOM,EAAO1B,QACdV,KAAK,UACLqB,GAAG,UACHU,KAAK,OACLC,UAAWvD,KAGf,kBAAC,EAAD,CAAOgB,QAASA,EAAQiB,QAAShB,QAASuD,EAAOvC,UACjD,kBAACvB,EAAD,oDAEE,kBAAC,IAAD,CACE0C,SAAU,SAACuB,GACT3B,EAAgB,OAChBC,EAAa0B,IAEftB,MAAOM,EAAOxB,IACdZ,KAAK,MACLqB,GAAG,MACHU,KAAK,OACLC,UAAWvD,KAGf,kBAAC,EAAD,CAAOgB,QAASA,EAAQmB,IAAKlB,QAASuD,EAAOrC,MAC7C,kBAACzB,EAAD,6CAEE,kBAACP,EAAD,KACE,kBAAC,IAAD,CACEiD,SAAUH,EACVI,MAAOM,EAAOvB,OACdb,KAAK,SACLqB,GAAG,SACHU,KAAK,OACLC,UAAWvD,IAEZ,EAAK+C,aAAaC,EAAiBC,IAEtC,kBAAC1C,EAAD,CAAcqE,QAAS,EAAKpC,UAAUmB,EAAOvB,OAAQM,IAArD,qDAIF,kBAAChC,EAAD,oGAEE,kBAAC,IAAD,CACEa,KAAK,cACL6B,SAAUH,EACVL,GAAG,cACHiC,gBAAc,EACdvB,KAAK,WACLC,UAAWvD,KAGf,kBAAC,EAAD,CAAOgB,QAAQ,cAAcC,QAASuD,EAAOnC,cAC7C,kBAAChC,EAAD,CAAcyE,SAAUJ,EAAcK,SAAS,UAA/C,mE,GA7NqBC,a,6MCfnC,IAQeC,EARChF,UAAOiF,QAAV,KCSEC,EAPH,WACV,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCDNC,IAASC,OACP,oCACE,kBAAC,EAAD,MACA,kBAAC,YAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.60f97b1e.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n*{\nbox-sizing: border-box;\n}\n  body {\n    display:flex;\n    justify-content:center;\n  }\n`;\n\nexport default GlobalStyle;\n","import styled from 'styled-components';\nimport { Input, Button } from 'antd';\n\nexport const StyledInput = styled(Input)`\n  border-color: aqua;\n`;\n\nexport const SkillsWrap = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n\n  & > input {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const StyledButton = styled(Button)`\n  width: 100px;\n  border-color: aqua;\n  align-self: center;\n  margin-top: 40px;\n`;\nexport const SkillsButton = styled(Button)`\n  width: 100px;\n  position: absolute;\n  right: -110px;\n  border-color: aqua;\n`;\n\nexport const StyledForm = styled.form`\n  width: 350px;\n  display: flex;\n  justify-content: space-between;\n  flex-flow: column nowrap;\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  margin-bottom: 2px;\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-between;\n  color: Black;\n  font-size: 14px;\n\n  &:last-child {\n    justify-content: flex-start;\n  }\n\n  &:last-child input {\n    margin-left: 50px;\n  }\n`;\n\nexport const Wrap = styled.div`\n  margin: 0px auto;\n`;\n","import styled from 'styled-components';\n\nconst ErrorMessage = styled.div`\n  margin-bottom: 15px;\n  font-size: 12px;\n  color: ${({ validate }) => (validate ? 'green' : 'red')};\n  align-self: flex-end;\n`;\nexport default ErrorMessage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ErrorMessage from '../../styled/ErrorStyled';\n\nconst Error = ({ touched, message }) => {\n  if (!touched) {\n    return <ErrorMessage>&nbsp;</ErrorMessage>;\n  }\n  if (message && touched) {\n    return <ErrorMessage>{message}</ErrorMessage>;\n  }\n  return <ErrorMessage validate>{touched === 'acceptTerms' ? '' : 'Заполнено верно'}</ErrorMessage>;\n};\n\nError.propTypes = {\n  touched: PropTypes.string.isRequired,\n  message: PropTypes.string.isRequired,\n};\n\nexport default Error;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport ErrorMessage from '../../styled/ErrorStyled';\n\nconst ResponseError = ({ response }) => {\n  if (response === 'successfully') {\n    return <ErrorMessage validate>Email успешно зарегестрирован</ErrorMessage>;\n  }\n  if (response === 'not successful') {\n    return <ErrorMessage>Email уже существует</ErrorMessage>;\n  }\n  return null;\n};\n\nResponseError.propTypes = {\n  response: PropTypes.string.isRequired,\n};\nexport default ResponseError;\n","import * as Yup from 'yup';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .typeError('Неверный формат введенных данных')\n    .max(50, 'Не более 50 символов')\n    .required('Поле не заполнено'),\n  password: Yup.string()\n    .typeError('Неверный формат введенных данных')\n    .max(40, 'Не более 40 символов')\n    .min(8, 'Не менее 8 символов')\n    .matches(\n      /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])/,\n      'Пароль должен состоять из латинских букв и цифр, а также содержать хотя бы одну строчную, заглавную буквы и цифры'\n    )\n    .required('Поле не заполнено'),\n  repeatPassword: Yup.string()\n    .typeError('Неверный формат введенных данных')\n    .oneOf([Yup.ref('password')], 'Пароли не совпадают')\n    .required('Поле не заполнено'),\n  email: Yup.string()\n    .typeError('Неверный формат введенных данных')\n    .email('Некорректный email адрес')\n    .required('Поле не заполнено'),\n  website: Yup.string()\n    .url('Некорректный url адрес')\n    .typeError('Неверный формат введенных данных')\n    .max(50, 'Не более 50 символов'),\n  age: Yup.number()\n    .typeError('Неверный формат введенных данных')\n    .max(50, 'Не более 50 символов')\n    .required('Поле не заполнено'),\n  skills: Yup.string()\n    .typeError('Неверный формат введенных данных')\n    .max(50, 'Не более 50 символов'),\n  acceptTerms: Yup.boolean().oneOf([true], 'Необходимо принять соглашение'),\n});\n\nexport default validationSchema;\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport axios from 'axios';\nimport _uniqueId from 'lodash/uniqueId';\nimport {\n  StyledInput,\n  StyledForm,\n  Label,\n  Wrap,\n  StyledButton,\n  SkillsButton,\n  SkillsWrap,\n} from '../../styled/FormsStyled';\nimport Error from '../Error/Error';\nimport ResponseError from '../Error/ResponseError';\nimport validationSchema from '../helpers/Yup';\n\nexport default class Forms extends Component {\n  state = {\n    skills: [],\n    response: '',\n  };\n\n  addSkills = (skill, setFieldValue) => () => {\n    const { skills } = this.state;\n    if (skill === '') {\n      return;\n    }\n    this.setState({\n      skills: [{ skill, id: _uniqueId() }, ...skills],\n    });\n    setFieldValue('skills', '');\n  };\n\n  clearArrSkills = () => {\n    this.setState({\n      skills: [],\n    });\n  };\n\n  renderSkills = (setFieldTouched, handleChange) => {\n    const { skills } = this.state;\n    return skills.map(({ skill, id }) => {\n      return (\n        <Field\n          key={id}\n          onChange={handleChange}\n          value={skill}\n          name=\"skills\"\n          id=\"skills\"\n          type=\"text\"\n          component={StyledInput}\n        />\n      );\n    });\n  };\n\n  render() {\n    const { response, skills } = this.state;\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          password: '',\n          repeatPassword: '',\n          email: '',\n          website: '',\n          age: '',\n          skills: '',\n          acceptTerms: '',\n        }}\n        validationSchema={validationSchema}\n        onSubmit={async (values, { setSubmitting }) => {\n          const request = await axios({\n            url: '/sign-up',\n            baseURL: 'http://localhost:3001',\n            method: 'post',\n            transformRequest: [\n              (data) => {\n                return JSON.stringify(data);\n              },\n            ],\n            headers: {\n              'Access-Control-Allow-Origin': '*',\n              'Content-Type': 'application/json',\n            },\n            data: {\n              name: values.name,\n              password: values.password,\n              repeatPassword: values.repeatPassword,\n              email: values.email,\n              website: values.website,\n              age: values.age,\n              skills,\n            },\n          });\n          this.setState({\n            response: request.data,\n          });\n          setSubmitting(true);\n          setTimeout(() => {\n            this.clearArrSkills();\n            setSubmitting(false);\n          }, 500);\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          setFieldTouched,\n          setFieldValue,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <Wrap>\n            <StyledForm onSubmit={handleSubmit}>\n              <Label>\n                Имя*:\n                <Field\n                  onChange={(event) => {\n                    setFieldTouched('name');\n                    handleChange(event);\n                  }}\n                  value={values.name}\n                  name=\"name\"\n                  id=\"name\"\n                  type=\"text\"\n                  component={StyledInput}\n                />\n              </Label>\n              <Error touched={touched.name} message={errors.name} />\n              <Label>\n                Пароль*:\n                <Field\n                  onChange={(event) => {\n                    setFieldTouched('password');\n                    handleChange(event);\n                  }}\n                  value={values.password}\n                  name=\"password\"\n                  id=\"password\"\n                  type=\"password\"\n                  component={StyledInput}\n                />\n              </Label>\n              <Error touched={touched.password} message={errors.password} />\n              <Label>\n                Подтвердение пароля*:\n                <Field\n                  onChange={(event) => {\n                    setFieldTouched('repeatPassword');\n                    handleChange(event);\n                  }}\n                  value={values.repeatPassword}\n                  name=\"repeatPassword\"\n                  id=\"repeatPassword\"\n                  type=\"password\"\n                  component={StyledInput}\n                />\n              </Label>\n              <Error touched={touched.repeatPassword} message={errors.repeatPassword} />\n              <Label>\n                Email*:\n                <Field\n                  onChange={(event) => {\n                    setFieldTouched('email');\n                    handleChange(event);\n                  }}\n                  value={values.email}\n                  name=\"email\"\n                  id=\"email\"\n                  type=\"email\"\n                  component={StyledInput}\n                />\n              </Label>\n              <Error response touched={touched.email} message={errors.email} />\n              <ResponseError response={response} />\n              <Label>\n                Сайт:\n                <Field\n                  onChange={(event) => {\n                    setFieldTouched('website');\n                    handleChange(event);\n                  }}\n                  value={values.website}\n                  name=\"website\"\n                  id=\"website\"\n                  type=\"text\"\n                  component={StyledInput}\n                />\n              </Label>\n              <Error touched={touched.website} message={errors.website} />\n              <Label>\n                Возраст*:\n                <Field\n                  onChange={(event) => {\n                    setFieldTouched('age');\n                    handleChange(event);\n                  }}\n                  value={values.age}\n                  name=\"age\"\n                  id=\"age\"\n                  type=\"text\"\n                  component={StyledInput}\n                />\n              </Label>\n              <Error touched={touched.age} message={errors.age} />\n              <Label>\n                Навыки:\n                <SkillsWrap>\n                  <Field\n                    onChange={handleChange}\n                    value={values.skills}\n                    name=\"skills\"\n                    id=\"skills\"\n                    type=\"text\"\n                    component={StyledInput}\n                  />\n                  {this.renderSkills(setFieldTouched, handleChange)}\n                </SkillsWrap>\n                <SkillsButton onClick={this.addSkills(values.skills, setFieldValue)}>\n                  Добавить\n                </SkillsButton>\n              </Label>\n              <Label>\n                Принимаю условия:\n                <Field\n                  name=\"acceptTerms\"\n                  onChange={handleChange}\n                  id=\"acceptTerms\"\n                  defaultChecked\n                  type=\"checkbox\"\n                  component={StyledInput}\n                />\n              </Label>\n              <Error touched=\"acceptTerms\" message={errors.acceptTerms} />\n              <StyledButton disabled={isSubmitting} htmlType=\"submit\">\n                Отправить\n              </StyledButton>\n            </StyledForm>\n          </Wrap>\n        )}\n      </Formik>\n    );\n  }\n}\n","import styled from 'styled-components';\n\nconst Section = styled.section`\n  margin-top: 50px;\n  padding: 50px;\n  width: 600px;\n  display: flex;\n  justify-content: center;\n  background-color: aliceblue;\n`;\nexport default Section;\n","import React from 'react';\nimport Forms from '../Forms/Forms';\nimport Section from '../../styled/AppStyled';\n\nconst App = () => {\n  return (\n    <Section>\n      <Forms />\n    </Section>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Normalize } from 'styled-normalize';\nimport GlobalStyle from './styled/styled';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <Normalize />\n    <App />\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}